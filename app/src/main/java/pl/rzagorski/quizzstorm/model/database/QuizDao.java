package pl.rzagorski.quizzstorm.model.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import pl.rzagorski.quizzstorm.model.database.Quiz;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUIZ".
*/
public class QuizDao extends AbstractDao<Quiz, Long> {

    public static final String TABLENAME = "QUIZ";

    /**
     * Properties of entity Quiz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ButtonStart = new Property(1, String.class, "buttonStart", false, "BUTTON_START");
        public final static Property ShareTitle = new Property(2, String.class, "shareTitle", false, "SHARE_TITLE");
        public final static Property Questions = new Property(3, Long.class, "questions", false, "QUESTIONS");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property Sponsored = new Property(5, Boolean.class, "sponsored", false, "SPONSORED");
        public final static Property Category = new Property(6, Long.class, "Category", false, "CATEGORY");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property Photo = new Property(10, String.class, "photo", false, "PHOTO");
        public final static Property Scripts = new Property(11, String.class, "scripts", false, "SCRIPTS");
        public final static Property IsBattle = new Property(12, Boolean.class, "isBattle", false, "IS_BATTLE");
        public final static Property Created = new Property(13, Long.class, "created", false, "CREATED");
        public final static Property AverageResult = new Property(14, Double.class, "averageResult", false, "AVERAGE_RESULT");
        public final static Property ResultCount = new Property(15, Long.class, "resultCount", false, "RESULT_COUNT");
        public final static Property CityAverage = new Property(16, Double.class, "cityAverage", false, "CITY_AVERAGE");
        public final static Property CityTime = new Property(17, Double.class, "cityTime", false, "CITY_TIME");
        public final static Property CityCount = new Property(18, Double.class, "cityCount", false, "CITY_COUNT");
        public final static Property UserBattleDone = new Property(19, Boolean.class, "userBattleDone", false, "USER_BATTLE_DONE");
    };

    private DaoSession daoSession;


    public QuizDao(DaoConfig config) {
        super(config);
    }
    
    public QuizDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUIZ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BUTTON_START\" TEXT," + // 1: buttonStart
                "\"SHARE_TITLE\" TEXT," + // 2: shareTitle
                "\"QUESTIONS\" INTEGER," + // 3: questions
                "\"CREATED_AT\" INTEGER," + // 4: createdAt
                "\"SPONSORED\" INTEGER," + // 5: sponsored
                "\"CATEGORY\" INTEGER," + // 6: Category
                "\"TYPE\" TEXT," + // 7: type
                "\"TITLE\" TEXT," + // 8: title
                "\"CONTENT\" TEXT," + // 9: content
                "\"PHOTO\" TEXT," + // 10: photo
                "\"SCRIPTS\" TEXT," + // 11: scripts
                "\"IS_BATTLE\" INTEGER," + // 12: isBattle
                "\"CREATED\" INTEGER," + // 13: created
                "\"AVERAGE_RESULT\" REAL," + // 14: averageResult
                "\"RESULT_COUNT\" INTEGER," + // 15: resultCount
                "\"CITY_AVERAGE\" REAL," + // 16: cityAverage
                "\"CITY_TIME\" REAL," + // 17: cityTime
                "\"CITY_COUNT\" REAL," + // 18: cityCount
                "\"USER_BATTLE_DONE\" INTEGER);"); // 19: userBattleDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUIZ\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Quiz entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String buttonStart = entity.getButtonStart();
        if (buttonStart != null) {
            stmt.bindString(2, buttonStart);
        }
 
        String shareTitle = entity.getShareTitle();
        if (shareTitle != null) {
            stmt.bindString(3, shareTitle);
        }
 
        Long questions = entity.getQuestions();
        if (questions != null) {
            stmt.bindLong(4, questions);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(5, createdAt.getTime());
        }
 
        Boolean sponsored = entity.getSponsored();
        if (sponsored != null) {
            stmt.bindLong(6, sponsored ? 1L: 0L);
        }
 
        Long Category = entity.getCategory();
        if (Category != null) {
            stmt.bindLong(7, Category);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(11, photo);
        }
 
        String scripts = entity.getScripts();
        if (scripts != null) {
            stmt.bindString(12, scripts);
        }
 
        Boolean isBattle = entity.getIsBattle();
        if (isBattle != null) {
            stmt.bindLong(13, isBattle ? 1L: 0L);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(14, created);
        }
 
        Double averageResult = entity.getAverageResult();
        if (averageResult != null) {
            stmt.bindDouble(15, averageResult);
        }
 
        Long resultCount = entity.getResultCount();
        if (resultCount != null) {
            stmt.bindLong(16, resultCount);
        }
 
        Double cityAverage = entity.getCityAverage();
        if (cityAverage != null) {
            stmt.bindDouble(17, cityAverage);
        }
 
        Double cityTime = entity.getCityTime();
        if (cityTime != null) {
            stmt.bindDouble(18, cityTime);
        }
 
        Double cityCount = entity.getCityCount();
        if (cityCount != null) {
            stmt.bindDouble(19, cityCount);
        }
 
        Boolean userBattleDone = entity.getUserBattleDone();
        if (userBattleDone != null) {
            stmt.bindLong(20, userBattleDone ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Quiz entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Quiz readEntity(Cursor cursor, int offset) {
        Quiz entity = new Quiz( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buttonStart
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shareTitle
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // questions
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // sponsored
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // Category
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // scripts
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isBattle
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // created
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // averageResult
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // resultCount
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // cityAverage
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // cityTime
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // cityCount
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0 // userBattleDone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Quiz entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setButtonStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShareTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestions(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSponsored(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScripts(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsBattle(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setCreated(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setAverageResult(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setResultCount(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setCityAverage(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setCityTime(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setCityCount(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setUserBattleDone(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Quiz entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Quiz entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPhotoDao().getAllColumns());
            builder.append(" FROM QUIZ T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.\"CATEGORY\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PHOTO T1 ON T.\"PHOTO\"=T1.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Quiz loadCurrentDeep(Cursor cursor, boolean lock) {
        Quiz entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category CategoryRef = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategoryRef(CategoryRef);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        Photo PhotoRef = loadCurrentOther(daoSession.getPhotoDao(), cursor, offset);
        entity.setPhotoRef(PhotoRef);

        return entity;    
    }

    public Quiz loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Quiz> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Quiz> list = new ArrayList<Quiz>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Quiz> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Quiz> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
