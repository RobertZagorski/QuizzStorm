package pl.rzagorski.quizzstorm.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RATE".
*/
public class RateDao extends AbstractDao<Rate, Long> {

    public static final String TABLENAME = "RATE";

    /**
     * Properties of entity Rate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScoreFrom = new Property(1, Long.class, "scoreFrom", false, "SCORE_FROM");
        public final static Property ScoreTo = new Property(2, Long.class, "scoreTo", false, "SCORE_TO");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
    };

    private DaoSession daoSession;


    public RateDao(DaoConfig config) {
        super(config);
    }
    
    public RateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCORE_FROM\" INTEGER," + // 1: scoreFrom
                "\"SCORE_TO\" INTEGER," + // 2: scoreTo
                "\"CONTENT\" TEXT);"); // 3: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RATE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long scoreFrom = entity.getScoreFrom();
        if (scoreFrom != null) {
            stmt.bindLong(2, scoreFrom);
        }
 
        Long scoreTo = entity.getScoreTo();
        if (scoreTo != null) {
            stmt.bindLong(3, scoreTo);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
    }

    @Override
    protected void attachEntity(Rate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rate readEntity(Cursor cursor, int offset) {
        Rate entity = new Rate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // scoreFrom
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // scoreTo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // content
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScoreFrom(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setScoreTo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
