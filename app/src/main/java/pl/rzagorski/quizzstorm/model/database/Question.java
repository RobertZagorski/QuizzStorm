package pl.rzagorski.quizzstorm.model.database;

import java.util.List;
import pl.rzagorski.quizzstorm.model.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "QUESTION".
 */
public class Question {

    private Long id;
    private String photo;
    private Long quiz;
    private String text;
    private String answer;
    private String type;
    private Long order;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionDao myDao;

    private Photo photoRef;
    private String photoRef__resolvedKey;

    private List<Answer> AnswersRef;

    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    public Question(Long id, String photo, Long quiz, String text, String answer, String type, Long order) {
        this.id = id;
        this.photo = photo;
        this.quiz = quiz;
        this.text = text;
        this.answer = answer;
        this.type = type;
        this.order = order;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPhoto() {
        return photo;
    }

    public void setPhoto(String photo) {
        this.photo = photo;
    }

    public Long getQuiz() {
        return quiz;
    }

    public void setQuiz(Long quiz) {
        this.quiz = quiz;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Long getOrder() {
        return order;
    }

    public void setOrder(Long order) {
        this.order = order;
    }

    /** To-one relationship, resolved on first access. */
    public Photo getPhotoRef() {
        String __key = this.photo;
        if (photoRef__resolvedKey == null || photoRef__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotoDao targetDao = daoSession.getPhotoDao();
            Photo photoRefNew = targetDao.load(__key);
            synchronized (this) {
                photoRef = photoRefNew;
            	photoRef__resolvedKey = __key;
            }
        }
        return photoRef;
    }

    public void setPhotoRef(Photo photoRef) {
        synchronized (this) {
            this.photoRef = photoRef;
            photo = photoRef == null ? null : photoRef.getId();
            photoRef__resolvedKey = photo;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Answer> getAnswersRef() {
        if (AnswersRef == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            List<Answer> AnswersRefNew = targetDao._queryQuestion_AnswersRef(id);
            synchronized (this) {
                if(AnswersRef == null) {
                    AnswersRef = AnswersRefNew;
                }
            }
        }
        return AnswersRef;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswersRef() {
        AnswersRef = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
