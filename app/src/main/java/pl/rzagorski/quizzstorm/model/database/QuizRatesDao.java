package pl.rzagorski.quizzstorm.model.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pl.rzagorski.quizzstorm.model.database.QuizRates;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUIZ_RATES".
*/
public class QuizRatesDao extends AbstractDao<QuizRates, Long> {

    public static final String TABLENAME = "QUIZ_RATES";

    /**
     * Properties of entity QuizRates.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quiz = new Property(1, Long.class, "quiz", false, "QUIZ");
        public final static Property Rate = new Property(2, Long.class, "rate", false, "RATE");
    };

    private Query<QuizRates> rate_RateRefQuery;
    private Query<QuizRates> quiz_RatesRefQuery;

    public QuizRatesDao(DaoConfig config) {
        super(config);
    }
    
    public QuizRatesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUIZ_RATES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUIZ\" INTEGER," + // 1: quiz
                "\"RATE\" INTEGER);"); // 2: rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUIZ_RATES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuizRates entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long quiz = entity.getQuiz();
        if (quiz != null) {
            stmt.bindLong(2, quiz);
        }
 
        Long rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(3, rate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuizRates readEntity(Cursor cursor, int offset) {
        QuizRates entity = new QuizRates( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // quiz
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // rate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuizRates entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuiz(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuizRates entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuizRates entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "RateRef" to-many relationship of Rate. */
    public List<QuizRates> _queryRate_RateRef(Long rate) {
        synchronized (this) {
            if (rate_RateRefQuery == null) {
                QueryBuilder<QuizRates> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Rate.eq(null));
                rate_RateRefQuery = queryBuilder.build();
            }
        }
        Query<QuizRates> query = rate_RateRefQuery.forCurrentThread();
        query.setParameter(0, rate);
        return query.list();
    }

    /** Internal query to resolve the "RatesRef" to-many relationship of Quiz. */
    public List<QuizRates> _queryQuiz_RatesRef(Long quiz) {
        synchronized (this) {
            if (quiz_RatesRefQuery == null) {
                QueryBuilder<QuizRates> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Quiz.eq(null));
                quiz_RatesRefQuery = queryBuilder.build();
            }
        }
        Query<QuizRates> query = quiz_RatesRefQuery.forCurrentThread();
        query.setParameter(0, quiz);
        return query.list();
    }

}
