package pl.rzagorski.quizzstorm.model.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUIZ_RESULT".
*/
public class QuizResultDao extends AbstractDao<QuizResult, Long> {

    public static final String TABLENAME = "QUIZ_RESULT";

    /**
     * Properties of entity QuizResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quiz = new Property(1, Long.class, "quiz", false, "QUIZ");
        public final static Property City = new Property(2, Long.class, "city", false, "CITY");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property Result = new Property(4, Float.class, "result", false, "RESULT");
        public final static Property ResolvedTime = new Property(5, Long.class, "resolvedTime", false, "RESOLVED_TIME");
    };

    private Query<QuizResult> quiz_LatestResultRefQuery;

    public QuizResultDao(DaoConfig config) {
        super(config);
    }
    
    public QuizResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUIZ_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUIZ\" INTEGER," + // 1: quiz
                "\"CITY\" INTEGER," + // 2: city
                "\"END_DATE\" INTEGER," + // 3: endDate
                "\"RESULT\" REAL," + // 4: result
                "\"RESOLVED_TIME\" INTEGER);"); // 5: resolvedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUIZ_RESULT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuizResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long quiz = entity.getQuiz();
        if (quiz != null) {
            stmt.bindLong(2, quiz);
        }
 
        Long city = entity.getCity();
        if (city != null) {
            stmt.bindLong(3, city);
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
 
        Float result = entity.getResult();
        if (result != null) {
            stmt.bindDouble(5, result);
        }
 
        Long resolvedTime = entity.getResolvedTime();
        if (resolvedTime != null) {
            stmt.bindLong(6, resolvedTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QuizResult readEntity(Cursor cursor, int offset) {
        QuizResult entity = new QuizResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // quiz
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // city
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // result
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // resolvedTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuizResult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuiz(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setResult(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setResolvedTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QuizResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QuizResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "LatestResultRef" to-many relationship of Quiz. */
    public List<QuizResult> _queryQuiz_LatestResultRef(Long quiz) {
        synchronized (this) {
            if (quiz_LatestResultRefQuery == null) {
                QueryBuilder<QuizResult> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Quiz.eq(null));
                quiz_LatestResultRefQuery = queryBuilder.build();
            }
        }
        Query<QuizResult> query = quiz_LatestResultRefQuery.forCurrentThread();
        query.setParameter(0, quiz);
        return query.list();
    }

}
